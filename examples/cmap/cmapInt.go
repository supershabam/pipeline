// AUTOMATICALLY GENERATED FILE - DO NOT EDIT
// generated by pipeliner@v0.0.1
package main

// assuming no imports needed for in/out types for now

import "sync"

// cmapInt was generated by pipeliner on Mar 7, 2015 at 12:19am (EST)
func cmapInt(concurrency int, fn func(int) string, in <-chan int) <-chan string {
  if concurrency <= 0 {
    panic("concurrency must be greater than zero")
  }
  out := make(chan string)
  go func() {
    defer close(out)
    wg := sync.WaitGroup{}
    wg.Add(concurrency)
    for i := 0; i < concurrency; i++ {
      go func() {
        defer wg.Done()
        for item := range in {
          out <- fn(item)
        }
      }()
    }
    wg.Wait()
  }()
  return out
}
