// AUTOMATICALLY GENERATED FILE - DO NOT EDIT
// generated by pipeliner@v0.0.1
package main

// assuming no imports needed for in/out types for now

import "sync"

// fmapInt was generated by pipeliner on Mar 8, 2015 at 2:15pm (EDT)
func fmapInt(concurrency int, fn func(int) <-chan string, in <-chan int) <-chan string {
	if concurrency <= 0 {
		panic("concurrency must be greater than zero")
	}
	out := make(chan string)
	go func() {
		defer close(out)
		wg := sync.WaitGroup{}
		wg.Add(concurrency)
		for i := 0; i < concurrency; i++ {
			go func() {
				defer wg.Done()
				for item := range in {
					m := fn(item)
					for o := range m {
						out <- o
					}
				}
			}()
		}
		wg.Wait()
	}()
	return out
}
