package pipeline

import (
	"io"
	"text/template"
)

const maxSizeBatch = `// AUTOMATICALLY GENERATED FILE - DO NOT EDIT
package {{.Package}}

// assuming no imports for now

// {{.FuncName}} was generated by pipeliner automatically on {{.Timestamp}}
func {{.FuncName}}(maxSize uint, in <-chan {{.Type}}) <-chan []{{.Type}} {
  if maxSize == 0 {
    panic("batch size must be greater than zero")
  }
  out := make(chan []{{.Type}})
  go func() {
    defer close(out)
  Start:
    batch := []{{.Type}}{}
    for {
      if len(batch) > maxSize {
        out <- batch
        continue Start
      }
      item, active := <- in
      if !active {
        if len(batch) > maxSize {
          out <- batch
        }
        return
      }
      batch = append(batch, item)
    }
  }()
  return out
}
`

var (
	maxSizeBatchT = template.Must(template.New("maxSizeBatch").Parse(maxSizeBatch))
)

// MaxSizeBatchConfig is the template variables for maxSizeBatch
type MaxSizeBatchConfig struct {
	Package   string
	FuncName  string
	Type      string
	Timestamp string
}

// RenderMaxSizeBatch renders a maxSizeBatch function
func RenderMaxSizeBatch(wr io.Writer, c MaxSizeBatchConfig) error {
	return maxSizeBatchT.Execute(wr, c)
}
