package pipeline

import "io"
import "text/template"

const cmap = `// AUTOMATICALLY GENERATED FILE - DO NOT EDIT
// generated by pipeliner@v{{.Version}}
package {{.Package}}

// assuming no imports needed for in/out types for now

import "sync"

// {{.FuncName}} was generated by pipeliner on {{.Timestamp}}
func {{.FuncName}}(concurrency int, fn func({{.InType}}) {{.OutType}}, in <-chan {{.InType}}) <-chan {{.OutType}} {
  if concurrency <= 0 {
    panic("concurrency must be greater than zero")
  }
  out := make(chan {{.OutType}})
  go func() {
    defer close(out)
    wg := sync.WaitGroup{}
    wg.Add(concurrency)
    for i := 0; i < concurrency; i++ {
      go func() {
        defer wg.Done()
        for item := range in {
          out <- fn(item)
        }
      }()
    }
    wg.Wait()
  }()
  return out
}
`

var (
	cmapT = template.Must(template.New("cmap").Parse(cmap))
)

// CMapConfig is the template variables for maxSizeBatch
type CMapConfig struct {
	Package   string
	FuncName  string
	InType    string
	OutType   string
	Timestamp string
	Version   string
}

// RenderCMap renders a maxSizeBatch function
func RenderCMap(wr io.Writer, c CMapConfig) error {
	return cmapT.Execute(wr, c)
}
